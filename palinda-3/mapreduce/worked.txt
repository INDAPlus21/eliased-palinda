package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"strings"
	"sync"
	"time"
)

const DataFile = "loremipsum.txt"

func m채p(text string, freq_chan chan map[string]int, wg *sync.WaitGroup) {
	// log.Println("in m채p: ", text[:10])
	freqs := make(map[string]int)
	words := strings.Fields(text)
	for _, word := range words {
		formatted_word := strings.ToLower(strings.ReplaceAll(word, ".", ""))
		formatted_word = strings.ReplaceAll(formatted_word, ",", "")
		// log.Println("adding formatted word")
		freqs[formatted_word] += 1
	}
	// log.Println(freqs)
	log.Println("in map again!")
	freq_chan <- freqs
	// log.Println("doing this") // so it does do this
	wg.Done()
	// log.Println("doing this as well") // so it does do this as well
}

/*func reduce(ind_word_freq <-chan map[string]int, final_freq chan map[string]int)  {
	freqs := make(map[string]int)
	for one_map := range ind_word_freq {
		for k, v := range one_map {
			freqs[k] += v
		}
	}
	final_freq <- freqs
}*/

// Return the word frequencies of the text argument.
//
// Split load optimally across processor cores.
func WordCount(text string) map[string]int {
	text1 := text[:len(text)/2] // aha! it's because you don't use string.fields
	text2 := text[len(text)/2:]

	freq_chan := make(chan map[string]int, 1) // Make room for one unmatched send.
	// two buffers was the key 
	// final_freq := make(chan map[string]int)

	wg := new(sync.WaitGroup)
	wg.Add(2)

	go m채p(text1, freq_chan, wg)
	go m채p(text2, freq_chan, wg)

	// final_freq <- freqs
	// go reduce(freq_chan, final_freq)
	// close(freq_chan)
	log.Println("in after wait")

	// wg.Add(1)
	freqs := make(map[string]int)

	go func() {
		log.Println("in go func")
		for one_map := range freq_chan {
			// log.Println("one map: ", one_map)
			for k, v := range one_map {
				// log.Println("in adding to freqs")
				freqs[k] += v
			}
		}
		/* for one_map := range freq_chan {
			log.Println("one map: ", one_map)
			for k, v := range one_map {
				// log.Println("in adding to freqs")
				freqs[k] += v
			}
		} */
		// log.Println(freqs)
		// wg.Done()
	}()

	wg.Wait()

	return freqs
}

// Benchmark how long it takes to count word frequencies in text numRuns times.
//
// Return the total time elapsed.
func benchmark(text string, numRuns int) int64 {
	start := time.Now()
	for i := 0; i < numRuns; i++ {
		WordCount(text)
	}
	runtimeMillis := time.Since(start).Nanoseconds() / 1e6

	return runtimeMillis
}

// Print the results of a benchmark
func printResults(runtimeMillis int64, numRuns int) {
	fmt.Printf("amount of runs: %d\n", numRuns)
	fmt.Printf("total time: %d ms\n", runtimeMillis)
	average := float64(runtimeMillis) / float64(numRuns)
	fmt.Printf("average time/run: %.2f ms\n", average)
}

func main() {
	// read in DataFile as a string called data
	data, err := ioutil.ReadFile(DataFile)
	if err != nil {
		log.Println(err.Error())
	}

	// log.Println(string(data))

	log.Println("word count: ", WordCount(string(data)))

	/* numRuns := 100
	runtimeMillis := benchmark(string(data), numRuns)
	printResults(runtimeMillis, numRuns) */
}
